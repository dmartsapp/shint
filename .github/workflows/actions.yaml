name: Build go binary and release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  lint-and-vuln-check:
    name: Lint and Vulnerability Check
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      packages: write
      actions: read

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.TELNET_TOKEN }}
      
      - name: SonarQube Scan
        id: sonarqube-scan-check
        uses: sonarsource/sonarcloud-github-action@v5
        with:
          projectBaseDir: .
        env:
          SONAR_TOKEN: ${{ secrets.CICD_SONAR_TOKEN }}
          SONAR_PROJECT_KEY: farhansabbir_cicd
          SONAR_ORGANIZATION: farhansabbir
          SONAR_HOST_URL: https://sonarcloud.io

      - name: Summarize SonarQube job
        if: always()
        run: |
          echo "## 🧪 SonarQube Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Step | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Checkout | ✅ Success |" >> $GITHUB_STEP_SUMMARY
          echo "| SonarQube Scan | $([[ '${{ steps.sonarqube-scan-check.outcome }}' == 'success' ]] && echo ✅ Success || echo ❌ Failed) |" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Gate | N/A (step is commented out) |" >> $GITHUB_STEP_SUMMARY
      
      - name: Clean up Sonar lock file
        run: |
          if [ -d ".scannerwork" ]; then
            rm -rf .scannerwork
          fi
        shell: bash
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.25.1'
          check-latest: true
      
      - name: Download Go modules
        run: go mod tidy

      - name: Run linting
        id: golangci-lint
        uses: reviewdog/action-golangci-lint@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          fail_level: error
          level: info

      - name: Run vulnerability check
        id: govulncheck
        if: ${{ steps.golangci-lint.outcome == 'success' }}
        uses: golang/govulncheck-action@v1
        with:
          output-file: govulncheck-report.txt

      - name: Generate govulncheck summary
        if: always()
        run: |
            echo "## Vulnerability Report" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| **Status** | **Vulnerabilities Found** |" >> $GITHUB_STEP_SUMMARY
            echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ steps.govulncheck.conclusion }}" == "success" ]; then
                VULN_COUNT=$(grep 'Vulnerabilities found:' $GITHUB_WORKSPACE/govulncheck-report.txt | awk -F': ' '{print $2}')
                if [ "$VULN_COUNT" -gt 0 ]; then
                    echo "| ❌ Failure | ${VULN_COUNT} |" >> $GITHUB_STEP_SUMMARY
                else
                    echo "| ✅ Success | 0 |" >> $GITHUB_STEP_SUMMARY
                fi
            else
                echo "| ❌ Failure | Unknown (step failed) |" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Details" >> $GITHUB_STEP_SUMMARY
            echo "Checked modules: $(grep 'Checked modules:' $GITHUB_WORKSPACE/govulncheck-report.txt | awk -F': ' '{print $2}')" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            grep -A 1000 'Details:' $GITHUB_WORKSPACE/govulncheck-report.txt >> $GITHUB_STEP_SUMMARY || true

  report-failure:
    name: Report Failure as Issue
    runs-on: ubuntu-latest
    needs: lint-and-vuln-check
    if: failure() && github.ref_name == github.event.repository.default_branch # Condition to only run on main branch failure
    permissions:
      issues: write # This job needs permission to create issues
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 1
      
      - name: Create issue on linting/vuln check failure
        uses: peter-evans/create-issue-from-file@v5
        with:
          title: "CI Failure: Linting or Vulnerability Check Failed"
          content-filepath: .github/ISSUE_TEMPLATE/ci_failure.md
          labels: bug, ci-failure
          assignees: ${{ github.actor }}
          token: ${{ secrets.GITHUB_TOKEN }}
          
  build:
    name: Build binaries
    runs-on: ubuntu-latest
    needs: lint-and-vuln-check
    permissions:
      contents: write
      id-token: write
      packages: write
      actions: read
    strategy:
      fail-fast: false
      matrix:
        os: [darwin, linux, windows]
        arch: [amd64, arm64]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.TELNET_TOKEN }}
    
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.25.1'
          check-latest: true
          
      - name: Build binary for ${{ matrix.os }}/${{ matrix.arch }}
        id: build-step
        run: |
          mkdir -p bin
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -buildvcs=true -ldflags="-s -w -X main.Version=${{ github.ref_name }}/${{ github.sha }}" -o bin/tnt.${{ matrix.os }}.${{ matrix.arch }}${{ (matrix.os == 'windows' && '.exe') || '' }}
          
      - name: Upload artifacts
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: binary-for-${{ matrix.os }}-${{ matrix.arch }}
          path: bin/

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
      id-token: write
      packages: write
      actions: read
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Checkout code for commit message
        uses: actions/checkout@v5
        with:
          fetch-depth: 1
          token: ${{ secrets.TELNET_TOKEN }}

      - name: Generate release notes
        run: |
          echo "## Release Notes for ${{ github.ref_name }}" >> release_notes.md
          echo "### Commit Message" >> release_notes.md
          echo "" >> release_notes.md
          echo "${{ github.event.head_commit.message }}" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Build Status Summary" >> release_notes.md
          echo "| OS/Arch | Status |" >> release_notes.md
          echo "| --- | --- |" >> release_notes.md
          
          # This loop checks for the existence of the expected files to determine status
          for combo in darwin-amd64 darwin-arm64 linux-amd64 linux-arm64 windows-amd64 windows-arm64; do
            os=$(echo $combo | awk -F'-' '{print $1}')
            arch=$(echo $combo | awk -F'-' '{print $2}')
            binary_name="tnt.$os.$arch"
            if [ "$os" == "windows" ]; then
              binary_name+=".exe"
            fi
            
            if [ -f "artifacts/binary-for-$os-$arch/bin/$binary_name" ]; then
              echo "| $os/$arch | ✅ Success |" >> release_notes.md
            else
              echo "| $os/$arch | ❌ Failed |" >> release_notes.md
            fi
          done

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          body_path: release_notes.md
          files: artifacts/*/*/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}        