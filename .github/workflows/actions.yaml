name: Build go binary and release it

on:
  push:
    # branches:
    #   - main
    tags:
      - 'v*.*.*'

jobs:
  lint-and-vuln-check:
    name: Lint and Vulnerability Check
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      packages: write
      actions: read

    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v6
        with:
          go-version: '>=1.25.1'
          check-latest: true
      - name: Run linting
        id: golangci-lint
        uses: reviewdog/action-golangci-lint@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
      - name: Run vulnerability check
        id: govulncheck
        if: ${{ steps.golangci-lint.conclusion == 'success' }}
        uses: golang/govulncheck-action@v1
        with:
          output-file: govulncheck-report.txt

      - name: Generate govulncheck summary
        if: always()
        run: |
            echo "## Vulnerability Report" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| **Status** | **Vulnerabilities Found** |" >> $GITHUB_STEP_SUMMARY
            echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ steps.govulncheck.conclusion }}" == "success" ]; then
                VULN_COUNT=$(grep 'Vulnerabilities found:' $GITHUB_WORKSPACE/govulncheck-report.txt | awk -F': ' '{print $2}')
                if [ "$VULN_COUNT" -gt 0 ]; then
                    echo "| ❌ Failure | ${VULN_COUNT} |" >> $GITHUB_STEP_SUMMARY
                else
                    echo "| ✅ Success | 0 |" >> $GITHUB_STEP_SUMMARY
                fi
            else
                echo "| ❌ Failure | Unknown (step failed) |" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Details" >> $GITHUB_STEP_SUMMARY
            echo "Checked modules: $(grep 'Checked modules:' $GITHUB_WORKSPACE/govulncheck-report.txt | awk -F': ' '{print $2}')" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            grep -A 1000 'Details:' $GITHUB_WORKSPACE/govulncheck-report.txt >> $GITHUB_STEP_SUMMARY || true

  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    needs: lint-and-vuln-check
    permissions:
      contents: write
      id-token: write
      packages: write
      actions: read
    strategy:
     fail-fast: false
     matrix:
       os: [darwin, linux, windows]
       arch: [amd64, arm64]
       exclude:
        - os: windows
          arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
    
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
         go-version: '>=1.25.1'
         check-latest: true
      - name: Build binary for ${{ matrix.os }}/${{ matrix.arch }}
        id: build-step
        run: |
            mkdir -p bin
            GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -buildvcs=true -ldflags="-s -w" -o bin/binary_${{ matrix.os }}_${{ matrix.arch }}${{ (matrix.os == 'windows' && '.exe') || '' }}

      - name: Upload artifacts
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
         name: binary-for-${{ matrix.os }}-${{ matrix.arch }}
         path: bin/

      - name: Generate build summary
        if: always()
        run: |
          echo "## Build Status for ${{ matrix.os }}/${{ matrix.arch }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| **Binary** | **Status** |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" == "success" ]; then
              echo "| ✅ binary_${{ matrix.os }}_${{ matrix.arch }} | Success |" >> $GITHUB_STEP_SUMMARY
          else
              echo "| ❌ binary_${{ matrix.os }}_${{ matrix.arch }} | Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          
          files: |
            bin/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Final Build Summary
        if: always()
        run: |
           echo "## Overall release status" >> $GITHUB_STEP_SUMMARY
           echo "" >> $GITHUB_STEP_SUMMARY
           echo "| **OS/Arch** | **Status** |" >> $GITHUB_STEP_SUMMARY
           echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
           for os in darwin linux windows; do
               for arch in amd64 arm64; do
                   echo "| $os/$arch | ${{ job.status }} |" >> $GITHUB_STEP_SUMMARY
               done
           done
